\import BracketSequence
\import CorrectBracketSequence
\import Data.Bool
\import Data.List
\import Data.Maybe
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set

\func proof-check-correctness {B : DecSet} :
  ∀ (seq : BracketString B) (check-correctness seq = true <-> IsCorrectBracketSequence seq) =>
  transportInv
      (\lam f => ∀ (seq : BracketString B) (f seq = true <-> IsCorrectBracketSequence seq))
      check-correctness-equivalence
      proof-check-correctness-modified
  \where {
    \open CorrectBracketSequence (to-string \as cbs-to-string)
    \open UnfinishedCBS (to-string \as ucbs-to-string, get-stack \as ucbs-get-stack)
    \open UnfinishedCBS (is-finished \as ucbs-is-finished)
    \open UnfinishedCBS (stack-cbs-independence \as ucbs-stack-cbs-independence)
    \open check-correctness-modified (aux \as ccm-aux)
    \open check-aux-assoc-left (conseq-1 \as cc-al-c1)
    \open check-correctness (aux \as cc-aux)

    \func check-correctness-modified {B : DecSet} (seq : BracketString B): Bool =>
      \case aux seq (just nil) \with {
        | just nil => true
        | _ => false
      }
      \where {
        \func State (B : DecSet) => Maybe (List B)

        \func aux {B : DecSet} (seq : BracketString B) (state : State B): State B
          | nil, state => state
          | :: (bracket b true) l, just stack => aux l (just (b :: stack))
          | :: (bracket b1 false) seq, just (:: b2 stack) =>
            \case b1 == b2 \with {
              | true => aux seq (just stack)
              | false => nothing
            }
          | _, _ => nothing
      }

    \func check-correctness-equivalence {B : DecSet} : check-correctness {B} = check-correctness-modified =>
      path (\lam i => aux-2 nil __ @ i)
      \where {
        \func aux-2 {B : DecSet} (stack : List B) (seq : BracketString B)
          : cc-aux seq stack = (\case ccm-aux seq (just stack) \with {
          | just nil => true | _ => false
        })
        \elim stack, seq
          | nil, nil => idp
          | :: a stack, nil => idp
          | nil, :: (bracket e false) l => idp
          | _, :: (bracket e true) l => aux-2 _ _
          | :: b stack, :: (bracket a false) l => \case a == b \as x, idp : a == b = x \with {
            | false, p => rewrite p idp
            | true, p => rewrite p (aux-2 _ _)
          }
      }

    \func proof-check-correctness-modified {B : DecSet} :
      ∀ (seq : BracketString B) (check-correctness-modified seq = true <-> IsCorrectBracketSequence seq) =>
      \lam _ => (proof-check-correctness-modified->, proof-check-correctness-modified<-)

    \func proof-check-correctness-modified-> {B : DecSet} {seq : BracketString B}
                                             (p : check-correctness-modified seq = true)
      : IsCorrectBracketSequence seq =>
      \case ccm-aux seq (just nil) \as aux-arg, idp : aux-arg = ccm-aux seq (just nil)
      \with {
        | just nil, iq => main-aux<- seq nil seq idp (unfinished-cbs cbs-nil nil) idp idp (inv iq)
        | nothing, iq => contradiction {rewriteI iq (unfold check-correctness-modified p)}
        | just (:: a a1), iq => contradiction {rewriteI iq (unfold check-correctness-modified p)}
      }

    \func proof-check-correctness-modified<- {B : DecSet} {seq : BracketString B}
                                             (p : IsCorrectBracketSequence seq)
      : check-correctness-modified seq = true
      | {seq}, inP proof => rewriteI proof.2 (unfold check-correctness-modified (rewrite main-aux-> idp))

    \data UnfinishedCBS (B : DecSet)
      | unfinished-cbs (CorrectBracketSequence B) (List (\Sigma B (CorrectBracketSequence B)))
      \where {
        \func to-string {B : DecSet} (ucbs : UnfinishedCBS B): BracketString B
          | unfinished-cbs cbs lst => aux cbs lst
          \where {
            \func aux {B : DecSet} (cbs : CorrectBracketSequence B)
                      (lst : List (\Sigma B (CorrectBracketSequence B))): BracketString B
              | cbs, nil => cbs-to-string cbs
              | cbs, :: (b, cbs-2) lst => aux cbs-2 lst ++ bracket b true :: cbs-to-string cbs
          }

        \func get-stack {B : DecSet} (ucbs : UnfinishedCBS B): List B
          | unfinished-cbs _ nil => nil
          | unfinished-cbs x (:: (b, _) lst) => b :: get-stack (unfinished-cbs x lst)

        \func is-finished {A : DecSet} {uf : UnfinishedCBS A} (p : get-stack {A} uf = nil):
          IsCorrectBracketSequence (to-string uf) \elim uf
          | unfinished-cbs c nil => inP (c, idp)
          | unfinished-cbs c (:: a l) => contradiction

        \func stack-cbs-independence {B : DecSet}
                                     (cbs : CorrectBracketSequence B)
                                     (lst : List (\Sigma B (CorrectBracketSequence B)))
          : get-stack (unfinished-cbs cbs lst) = get-stack (unfinished-cbs cbs-nil lst) \elim lst
          | nil => idp
          | :: a lst => pmap (a.1 ::) (stack-cbs-independence _ _)
      }

    \func main-aux<- {B : DecSet}
                     (str done rest : BracketString B)
                     (str=done+rest : str = done ++ rest)
                     (curr-ucbs : UnfinishedCBS B)
                     (curr-ucbs<=>done : ucbs-to-string curr-ucbs = done)
                     (aux-done<=>curr-ucbs-stack : ccm-aux done (just nil) = just (ucbs-get-stack curr-ucbs))
                     (total-success : ccm-aux str (just nil) = just nil)
      : IsCorrectBracketSequence str
    \elim rest, curr-ucbs
      | nil, curr-ucbs =>
        \let
          | done=str => inv (str=done+rest *> ++_nil)
          | empty-curr-stack => just-injective (inv aux-done<=>curr-ucbs-stack *> rewrite done=str total-success)
        \in \case ucbs-is-finished empty-curr-stack \with {
          | inP (cbs, proof) => inP (cbs, proof *> curr-ucbs<=>done *> done=str)
        }
      | :: (bracket b false) r, unfinished-cbs c nil =>
        contradiction {check-aux-assoc-left (rewriteI str=done+rest total-success) aux-done<=>curr-ucbs-stack}
      | :: (bracket b false) r, unfinished-cbs c (:: (b1, c1) l) =>
        \let
          | p => check-aux-assoc-left (rewriteI str=done+rest total-success) aux-done<=>curr-ucbs-stack
          | q => cc-al-c1 done (bracket b false :: nil) (just nil)
          | b=b1 => \case b == b1 \as q, idp \as i : b == b1 = q, rewrite i p \return b = b1 \with {
            | true, i, p => ==-= i
          }
        \in main-aux<- str (done ++ bracket b false :: nil) r (str=done+rest *> aux-++-::)
            (unfinished-cbs (cbs-cons-inv b1 c1 c) l)
            (rewrite (inv curr-ucbs<=>done) (rewrite b=b1 (uc-aux-inv-to-string b1 c1 c l)))
            (q *> rewrite aux-done<=>curr-ucbs-stack (\case b B.== b1 \as p, idp : b == b1 = p \with {
              | true, q => run {
                rewrite q,
                pmap just,
                ucbs-stack-cbs-independence c l *>,
                inv (ucbs-stack-cbs-independence (cbs-cons-inv b1 c1 c) l)
              }
              | false, q => contradiction {rewrite q p}
            })) total-success
      | :: (bracket b true) r, unfinished-cbs cbs pairs =>
        \let
          | p => check-aux-assoc-left (rewriteI str=done+rest total-success) aux-done<=>curr-ucbs-stack
          | q => check-aux-assoc-right (rewriteI str=done+rest total-success) p
          | t => check-aux-assoc-left.conseq-1 done (bracket b true :: nil) (just nil)
        \in main-aux<- str (done ++ bracket b true :: nil) r (str=done+rest *> aux-++-::)
            (unfinished-cbs cbs-nil ((b, cbs) :: pairs)) (rewrite curr-ucbs<=>done idp)
            (rewrite t (rewrite q (rewrite ucbs-stack-cbs-independence idp))) total-success

    \func check-nil-seq {B : DecSet} {s : Maybe (List B)}: ccm-aux nil s = s \elim s
      | nothing => idp
      | just a => idp

    \func check-nothing-state {B : DecSet} {seq : BracketString B}: ccm-aux seq nothing = nothing \elim seq
      | nil => idp
      | :: (bracket b false) l => idp
      | :: (bracket b true) l => idp

    \func check-aux-assoc-left {B : DecSet} {xs ys : BracketString B} {sb sc se : Maybe (List B)}
                               (p : ccm-aux (xs ++ ys) sb = se) (q : ccm-aux xs sb = sc)
      : ccm-aux ys sc = se
    \elim xs, sb
      | nil, _ => rewriteI q p
      | :: a l, nothing => rewrite (inv q *> check-nothing-state) (check-nothing-state *> inv check-nothing-state *> p)
      | :: (bracket e false) l, just nil => rewriteI p (rewriteI q check-nothing-state)
      | :: (bracket e false) l, just (:: a a1) =>
        \case e == a \as t, idp \as i : e == a = t, rewrite i p, rewrite i q
        \with {
          | false, i, p, q => rewriteI p (rewriteI q check-nothing-state)
          | true, i, p, q => check-aux-assoc-left p q
        }
      | :: (bracket e true) l, just a1 => check-aux-assoc-left p q
      \where {
        \func conseq-1 {B : DecSet} (xs ys : BracketString B) (state : Maybe (List B))
          : ccm-aux (xs ++ ys) state = ccm-aux ys (ccm-aux xs state) => inv (check-aux-assoc-left idp idp)
      }

    \func check-aux-assoc-right {B : DecSet} {xs ys : BracketString B}
                                {sb sc se : List B}
                                (p : ccm-aux (xs ++ ys) (just sb) = just se)
                                (q : ccm-aux ys (just sc) = just se)
      : ccm-aux xs (just sb) = just sc \elim xs, sb
      | nil, _ => pmap just (check-aux-injective p (p *> inv q))
      | :: (bracket _ false) l, nil => contradiction
      | :: (bracket b false) l, (:: b1 sb) =>
        \case b == b1 \as b=b1, idp \as i : b=b1 = b == b1, rewriteI i p \with {
          | true, i, p => rewriteI i (check-aux-assoc-right p q)
        }
      | :: (bracket b true) l, _ => check-aux-assoc-right p q

    \func check-aux-injective {B : DecSet} {xs : BracketString B} {stack stack1 z : List B}
                              (q : ccm-aux xs (just stack) = just z)
                              (p : ccm-aux xs (just stack) = ccm-aux xs (just stack1))
      : stack = stack1 \elim xs, stack, stack1
      | nil, _, _ => just-injective p
      | :: (bracket _ false) l, nil, _ => contradiction
      | :: (bracket _ false) l, _, nil => contradiction
      | :: (bracket _ true) l, _, _ => pmap safe-tail (check-aux-injective q p)
      | :: (bracket a false) l, :: b stack, :: c stack1 =>
        \case a == b \as a==b, a == c \as a==c,
              idp \as i-a==b : a == b = a==b,
              idp \as i-a==c : a == c = a==c,
              decideEq a b, decideEq a c,
              rewrite i-a==c (rewrite i-a==b p), rewrite i-a==b q
        \with {
          | true, false, i-a==b, i-a==c, _, _, p, q => contradiction
          | true, true, i-a==b, i-a==c, d, d1, p, q => run {
            rewriteI (==-= i-a==b),
            rewriteI (==-= i-a==c),
            rewrite (check-aux-injective q p),
            idp
          }
        }

    \func cbs-cons-inv {B : DecSet} (b : B) (left right : CorrectBracketSequence B): CorrectBracketSequence B \elim left
      | cbs-nil => cbs-cons b right cbs-nil
      | cbs-cons b1 left1 left2 => cbs-cons b1 left1 (cbs-cons-inv b left2 right)

    \func cbs-cons-inv-proof {B : DecSet} (b : B) (left right : CorrectBracketSequence B)
      : cbs-to-string (cbs-cons-inv b left right) =
    cbs-to-string left ++ bracket b true :: cbs-to-string right ++ bracket b false :: nil
    \elim left
      | cbs-nil => idp
      | cbs-cons b1 left1 left2 => run {
        rewrite (cbs-cons-inv-proof b left2 right),
        rewrite ++-assoc idp
      }

    \func uc-aux-inv-to-string {B : DecSet} (b : B) (l r : CorrectBracketSequence B)
                               (lst : List (\Sigma B (CorrectBracketSequence B)))
      : ucbs-to-string.aux (cbs-cons-inv b l r) lst
      = (ucbs-to-string.aux l lst ++ bracket b true :: cbs-to-string r) ++ bracket b false :: nil
    \elim lst
      | nil => rewrite ++-assoc (cbs-cons-inv-proof b l r)
      | :: a lst => run { rewrite ++-assoc, rewrite ++-assoc,
                          pmap (ucbs-to-string.aux a.2 lst ++), pmap (bracket a.1 true ::),
                          cbs-cons-inv-proof b l r
      }

    \func main-aux-> {B : DecSet} {cbs : CorrectBracketSequence B}:
      ccm-aux (cbs-to-string cbs) (just nil) = just nil \elim cbs
      | cbs-nil => idp
      | cbs-cons b cbs1 cbs2 =>
        \let
          | p => rewrite (aux-stack-subst _ _ (b :: nil) (main-aux-> {B} {cbs1}))
              (cc-al-c1 (bracket b true :: cbs-to-string cbs1) (bracket b false :: nil) (just nil))
          | q : ccm-aux (cbs-to-string cbs1 ++ bracket b false :: nil) (just (b :: nil)) = just nil =>
            \case decideEq b b \as b=b, idp \as i : b == b = decToBool b=b, rewrite i p \with {
              | yes e, q, p => p
              | no n, q, p => contradiction
            }
        \in run {
          rewriteI (inv aux-++-::),
          rewriteI main-aux->,
          rewriteI q,
          cc-al-c1 (bracket b true :: cbs-to-string cbs1 ++ bracket b false :: nil) (cbs-to-string cbs2) (just nil)
        }

    \func aux-stack-subst {B : DecSet} {seq : BracketString B}
                          (stack1 stack2 stack3 : List B)
                          (p : ccm-aux seq (just stack1) = just stack2)
      : ccm-aux seq (just (stack1 ++ stack3)) = just (stack2 ++ stack3)
    \elim seq, stack1, stack2, stack3, p
      | nil, nil, nil, _, p => idp
      | nil, :: a stack1, :: a1 stack2, stack3, p => pmap (\lam x => just (x ++ stack3)) (just-injective p)
      | :: a l, nil, nil, nil, p => p
      | :: (bracket a true) l, _, _, _, p => aux-stack-subst _ _ _ p
      | :: (bracket a false) l, nil, _, _, p => contradiction
      | :: (bracket e false) l, :: a _, _, _, p =>
        \case e == a \as q, idp \as i : e == a = q, rewrite i p
        \with {
          | true, i, p => rewrite i (aux-stack-subst _ _ _ p)
        }

    \func aux-++-:: {A : \Type} {a : A} {xs ys : List A}: xs ++ a :: ys = (xs ++ a :: nil) ++ ys \elim xs
      | nil => idp
      | :: a1 xs => pmap (a1 ::) aux-++-::

    \func ==-= {B : DecSet} {a b : B} (p : a == b = true): a = b =>
      \case decideEq a b \as q, idp : a == b = decToBool q \with {
        | yes e, q => e
        | no n, q => contradiction
      }

    \func safe-tail {A : \Type} (xs : List A): List A
      | nil => nil
      | :: a xs => xs
  }
